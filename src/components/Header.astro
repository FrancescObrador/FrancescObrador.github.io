---
import { Icon } from "astro-icon/components";
import LinkInline from "./shared/LinkInline.astro";

const navItems = [
  {
    title: "Experience",
    label: "experience",
    url: "/#experience",
    icon: "heroicons:briefcase"
  },
  {
    title: "Projects",
    label: "projects",
    url: "/#projects",
    icon: "heroicons:folder-open"
  },
  {
    title: "About",
    label: "about-me",
    url: "/#about-me",
    icon: "heroicons:user"
  },
  {
    title: "Contact",
    label: "contact",
    url: "mailto:obrador.francesc@gmail.com",
    icon: "heroicons:envelope"
  },
]
---

<header class="fixed top-0 z-50 w-full">
  <nav class="flex items-center justify-between px-4 py-3 mx-auto text-sm font-medium transition-all duration-300 max-w-7xl backdrop-blur-md bg-white/50 dark:bg-gray-800/30 rounded-2xl ring-1 ring-black/10 dark:ring-white/15 hover:ring-black/20 dark:hover:ring-white/30 shadow-sm hover:shadow-md">
    <!-- Logo o nombre del sitio -->
    <div class="text-lg font-semibold">
     FrancescObrador.dev
    </div>

    <!-- Menú para pantallas grandes -->
    <ul class="hidden md:flex gap-1 p-1 rounded-xl bg-black/5 dark:bg-white/5">
      {navItems.map((link) => (
        <li>
          <LinkInline
            href={link.url}
            class="relative flex items-center gap-2 px-4 py-2 rounded-lg transition-colors hover:bg-black/5 dark:hover:bg-white/5 [&.active]:bg-blue-500/10 [&.active]:text-blue-600 dark:[&.active]:text-blue-400"
            aria-label={link.label}
            data-section={link.label}
          >
            <Icon name={link.icon} class="w-4 h-4" />
            <span>{link.title}</span>
            <div class="absolute bottom-0 left-1/2 w-[calc(100%-2rem)] h-0.5 -translate-x-1/2 bg-current opacity-0 transition-opacity group-hover/nav:opacity-10"></div>
          </LinkInline>
        </li>
      ))}
      
      <!-- Toggle de Tema -->
      <li>
        <button
          id="theme-toggle"
          class="flex items-center justify-center w-10 h-10 rounded-lg hover:bg-black/5 dark:hover:bg-white/5 transition-colors group"
          aria-label="Toggle dark mode"
        >
          <Icon name="heroicons:sun" class="w-5 h-5 dark:hidden text-yellow-500 group-hover:text-yellow-600" />
          <Icon name="heroicons:moon" class="w-5 h-5 hidden dark:inline text-gray-500 group-hover:text-gray-600" />
        </button>
      </li>
    </ul>

    <!-- Botón de menú para móviles -->
    <button
      id="mobile-menu-button"
      class="md:hidden flex items-center justify-center w-10 h-10 rounded-lg hover:bg-black/5 dark:hover:bg-white/5 transition-colors"
      aria-label="Abrir menú"
    >
      <Icon name="heroicons:bars-3" class="w-6 h-6" />
    </button>
  </nav>

  <!-- Menú desplegable para móviles -->
  <div id="mobile-menu" class="md:hidden fixed top-16 left-0 right-0 bg-white dark:bg-gray-800 p-4 rounded-xl shadow-lg opacity-0 invisible transition-all transform -translate-y-5">
    <ul class="flex flex-col gap-2">
      {navItems.map((link) => (
        <li>
          <LinkInline
            href={link.url}
            class="flex items-center gap-2 px-4 py-2 rounded-lg transition-colors hover:bg-black/5 dark:hover:bg-white/5 [&.active]:bg-blue-500/10 [&.active]:text-blue-600 dark:[&.active]:text-blue-400"
            aria-label={link.label}
            data-section={link.label}
          >
            <Icon name={link.icon} class="w-4 h-4" />
            <span>{link.title}</span>
          </LinkInline>
        </li>
      ))}
      
      <!-- Toggle de Tema en móviles -->
      <li>
        <button
          id="theme-toggle-mobile"
          class="flex items-center justify-center w-full px-4 py-2 rounded-lg hover:bg-black/5 dark:hover:bg-white/5 transition-colors"
          aria-label="Toggle dark mode"
        >
          <Icon name="heroicons:sun" class="w-5 h-5 dark:hidden text-yellow-500" />
          <Icon name="heroicons:moon" class="w-5 h-5 hidden dark:inline text-gray-500" />
          <span class="ml-2">Cambiar tema</span>
        </button>
      </li>
    </ul>
  </div>
</header>

<script is:inline>
  // Sistema de tema persistente
  const themeKey = 'portfolio-theme'
  
  const getStoredTheme = () => localStorage.getItem(themeKey)
  const setStoredTheme = theme => localStorage.setItem(themeKey, theme)
  
  const applyTheme = (isDark) => {
    document.documentElement.classList.toggle('dark', isDark)
    setStoredTheme(isDark ? 'dark' : 'light')
  }
  
  const toggleTheme = () => {
    const isDark = !document.documentElement.classList.contains('dark')
    applyTheme(isDark)
  }
  
  // Inicialización del tema
  const initializeTheme = () => {
    const savedTheme = getStoredTheme()
    const systemDark = window.matchMedia('(prefers-color-scheme: dark)').matches
    
    if (savedTheme) {
      applyTheme(savedTheme === 'dark')
    } else {
      applyTheme(systemDark)
    }
  }
  
  // Event listeners para el tema
  document.addEventListener('DOMContentLoaded', initializeTheme)
  document.getElementById('theme-toggle')?.addEventListener('click', toggleTheme)
  document.getElementById('theme-toggle-mobile')?.addEventListener('click', toggleTheme)
  
  // Sincronizar con cambios del sistema
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
    if (!getStoredTheme()) applyTheme(e.matches)
  })

  // Menú móvil
  const mobileMenuButton = document.getElementById('mobile-menu-button')
  const mobileMenu = document.getElementById('mobile-menu')

  mobileMenuButton?.addEventListener('click', () => {
    const isOpen = mobileMenu.classList.toggle('opacity-0')
    mobileMenu.classList.toggle('invisible')
    mobileMenu.classList.toggle('-translate-y-5')
    mobileMenu.classList.toggle('translate-y-0')
  })
</script>

<style>
  #mobile-menu {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  #mobile-menu.translate-y-0 {
    transform: translateY(0);
    opacity: 1;
    visibility: visible;
  }
</style>